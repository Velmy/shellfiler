using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using ShellFiler.Document;
using ShellFiler.Document.Setting;
using ShellFiler.Terminal.TerminalSession;

namespace ShellFiler.Api {

    //=========================================================================================
    // プロパティ：ディレクトリ変更のモード
    //=========================================================================================
    public class ChangeDirectoryParam {
        // 変更先のディレクトリ名
        public string m_targetDirectory;

        // カーソルに設定するファイル名
        public string m_cursorFileName;

        // ファイル一覧のフィルター指定があるときtrue
        private bool m_fileListFilterSpecify;

        // ファイル一覧のフィルター
        private FileListFilterMode m_fileListFilterMode;

        //=========================================================================================
        // 機　能：コンストラクタ
        // 引　数：[in]directory  変更先のディレクトリ名
        // 　　　　[in]cursorFile カーソルに設定するファイル名
        // 　　　　[in]filterMode ファイル一覧のフィルター
        // 戻り値：なし
        //=========================================================================================
        private ChangeDirectoryParam(string directory, string cursorFile, FileListFilterMode filterMode) {
            m_targetDirectory = directory;
            m_cursorFileName = cursorFile;
            m_fileListFilterSpecify = true;
            m_fileListFilterMode = filterMode;
        }

        //=========================================================================================
        // 機　能：コンストラクタ
        // 引　数：[in]directory  変更先のディレクトリ名
        // 　　　　[in]cursorFile カーソルに設定するファイル名
        // 戻り値：なし
        //=========================================================================================
        private ChangeDirectoryParam(string directory, string cursorFile) {
            m_targetDirectory = directory;
            m_cursorFileName = cursorFile;
            m_fileListFilterSpecify = false;
            m_fileListFilterMode = null;
        }

        //=========================================================================================
        // プロパティ：できるだけカーソル位置を現在位置に保持するときtrue、先頭に移動してよいときfalse
        //=========================================================================================
        public virtual bool StayCursorPosition {
            get {
                return false;
            }
        }

        //=========================================================================================
        // プロパティ：マーク状態を引き継ぐときtrue
        //=========================================================================================
        public virtual bool InheritMarkState {
            get {
                return false;
            }
        }

        //=========================================================================================
        // プロパティ：マーク状態にするファイル名の一覧（null:マークしない）
        //=========================================================================================
        public virtual HashSet<string> MarkFileNameList {
            get {
                return null;
            }
        }

        //=========================================================================================
        // プロパティ：変更先のディレクトリ名
        //=========================================================================================
        public string TargetDirectory {
            get {
                return m_targetDirectory;
            }
            set {
                m_targetDirectory = value;
            }
        }

        //=========================================================================================
        // プロパティ：カーソルに設定するファイル名
        //=========================================================================================
        public string CursorFile {
            get {
                return m_cursorFileName;
            }
            set {
                m_cursorFileName = value;
            }
        }

        //=========================================================================================
        // プロパティ：ファイル一覧のフィルター指定があるときtrue
        //=========================================================================================
        public bool FileListFilterSpecify {
            get {
                return m_fileListFilterSpecify;
            }
        }

        //=========================================================================================
        // プロパティ：ファイル一覧のフィルター
        //=========================================================================================
        public FileListFilterMode FileListFilterMode {
            get {
                return m_fileListFilterMode;
            }
            set {
                m_fileListFilterMode = value;
            }
        }

        //=========================================================================================
        // クラス：初期化処理によるディレクトリの変更
        //=========================================================================================
        public class Initial : ChangeDirectoryParam {

            //=========================================================================================
            // 機　能：コンストラクタ
            // 引　数：[in]directory  変更先のディレクトリ名
            // 戻り値：なし
            //=========================================================================================
            public Initial(string directory) : base(directory, "") {
            }
        }

        //=========================================================================================
        // クラス：ディレクトリ名の直接指定によるディレクトリの変更
        //=========================================================================================
        public class Direct : ChangeDirectoryParam {

            //=========================================================================================
            // 機　能：コンストラクタ
            // 引　数：[in]directory  変更先のディレクトリ名
            // 戻り値：なし
            //=========================================================================================
            public Direct(string directory) : base(directory, null) {
            }

            //=========================================================================================
            // 機　能：コンストラクタ
            // 引　数：[in]directory  変更先のディレクトリ名
            // 　　　　[in]filterMode ファイル一覧のフィルター
            // 戻り値：なし
            //=========================================================================================
            public Direct(string directory, FileListFilterMode fileFilter) : base(directory, null, fileFilter) {
            }
        }

        //=========================================================================================
        // クラス：ディレクトリ名の直接指定、かつ、SSHシェルによるディレクトリの変更
        //=========================================================================================
        public class DirectSshShell : Direct {
            // 新しいチャネルで接続するときtrue
            private bool m_newChannel;

            //=========================================================================================
            // 機　能：コンストラクタ
            // 引　数：[in]directory   変更先のディレクトリ名
            // 　　　　[in]newChannel  新しいチャネルで接続するときtrue
            // 戻り値：なし
            //=========================================================================================
            public DirectSshShell(string directory, bool newChannel) : base(directory) {
                m_newChannel = newChannel;
            }

            //=========================================================================================
            // プロパティ：新しいチャネルで接続するときtrue
            //=========================================================================================
            public bool NewChannel {
                get {
                    return m_newChannel;
                }
            }
        }

        //=========================================================================================
        // クラス：ディレクトリ名の直接指定＆カーソル位置変更によるディレクトリの変更
        //=========================================================================================
        public class DirectAndSetCursor : Direct {

            //=========================================================================================
            // 機　能：コンストラクタ
            // 引　数：[in]directory   変更先のディレクトリ名
            // 　　　　[in]cursorFile  カーソルに設定するファイル名（設定しないときnull）
            // 戻り値：なし
            //=========================================================================================
            public DirectAndSetCursor(string directory, string cursorFile) : base(directory) {
                CursorFile = cursorFile;
            }
        }

        //=========================================================================================
        // クラス：ディレクトリ名の直接指定＆変更後の特定ファイルのマークによるディレクトリの変更
        //=========================================================================================
        public class DirectAndMark : Direct {
            // 移動後、マークするファイル名の一覧
            private HashSet<string> m_markFileList;

            //=========================================================================================
            // 機　能：コンストラクタ
            // 引　数：[in]directory     変更先のディレクトリ名
            // 　　　　[in]markFileList  マークするファイル名の一覧
            // 戻り値：なし
            //=========================================================================================
            public DirectAndMark(string directory, HashSet<string> markFileList) : base(directory) {
                m_markFileList = markFileList;
            }

            //=========================================================================================
            // プロパティ：マーク状態にするファイル名の一覧（null:マークしない）
            //=========================================================================================
            public override HashSet<string> MarkFileNameList {
                get {
                    return m_markFileList;
                }
            }
        }

        //=========================================================================================
        // クラス：親ディレクトリへの変更
        //=========================================================================================
        public class ChdirToParent : ChangeDirectoryParam {

            //=========================================================================================
            // 機　能：コンストラクタ
            // 引　数：[in]prevDir  変更前のディレクトリ名
            // 戻り値：なし
            //=========================================================================================
            public ChdirToParent(string prevDir) : base("..", prevDir) {
            }
        }

        //=========================================================================================
        // クラス：現在表示中のディレクトリの更新
        //=========================================================================================
        public class Refresh : ChangeDirectoryParam {

            //=========================================================================================
            // 機　能：コンストラクタ
            // 引　数：[in]directory  変更先のディレクトリ名（現在のディレクトリ）
            // 　　　　[in]cursorFile カーソルに設定するファイル名（現在のカーソル位置のファイル名）
            // 戻り値：なし
            //=========================================================================================
            public Refresh(string directory, string cursorFile) : base(directory, cursorFile) {
            }

            //=========================================================================================
            // 機　能：コンストラクタ
            // 引　数：[in]directory  変更先のディレクトリ名（現在のディレクトリ）
            // 　　　　[in]cursorFile カーソルに設定するファイル名（現在のカーソル位置のファイル名）
            // 　　　　[in]filterMode ファイル一覧のフィルター
            // 戻り値：なし
            //=========================================================================================
            public Refresh(string directory, string cursorFile, FileListFilterMode filterMode) : base(directory, cursorFile, filterMode) {
            }

            //=========================================================================================
            // プロパティ：できるだけカーソル位置を現在位置に保持するときtrue、先頭に移動してよいときfalse
            //=========================================================================================
            public override bool StayCursorPosition {
                get {
                    return true;
                }
            }

            //=========================================================================================
            // プロパティ：マーク状態を引き継ぐときtrue
            //=========================================================================================
            public override bool InheritMarkState {
                get {
                    return true;
                }
            }
        }

        //=========================================================================================
        // クラス：パスヒストリ直前のディレクトリへの変更
        //=========================================================================================
        public class PathHistoryPrev : ChangeDirectoryParam {

            //=========================================================================================
            // 機　能：コンストラクタ
            // 引　数：[in]item   変更先のパスヒストリの項目
            // 戻り値：なし
            //=========================================================================================
            public PathHistoryPrev(PathHistoryItem item) : base(item.Directory, null) {
            }
        }

        //=========================================================================================
        // クラス：パスヒストリ直後のディレクトリへの変更
        //=========================================================================================
        public class PathHistoryNext : ChangeDirectoryParam {

            //=========================================================================================
            // 機　能：コンストラクタ
            // 引　数：[in]item   変更先のパスヒストリの項目
            // 戻り値：なし
            //=========================================================================================
            public PathHistoryNext(PathHistoryItem item) : base(item.Directory, null) {
            }
        }

        //=========================================================================================
        // クラス：ディレクトリの再読込なしでのUIだけの変更
        //=========================================================================================
        public class UiOnly : ChangeDirectoryParam {

            //=========================================================================================
            // 機　能：コンストラクタ
            // 引　数：[in]cursorFile カーソルに設定するファイル名
            // 戻り値：なし
            //=========================================================================================
            public UiOnly(string cursorFile) : base(null, cursorFile) {
            }

            //=========================================================================================
            // プロパティ：できるだけカーソル位置を現在位置に保持するときtrue、先頭に移動してよいときfalse
            //=========================================================================================
            public override bool StayCursorPosition {
                get {
                    return true;
                }
            }
        }

        //=========================================================================================
        // クラス：SSH操作ユーザーの変更
        //=========================================================================================
        public class SSHChangeUser : ChangeDirectoryParam {
            // SSHユーザー変更の情報
            private SSHChangeUserInfo m_changeUserInfo;

            //=========================================================================================
            // 機　能：コンストラクタ
            // 引　数：[in]directory   変更先のディレクトリ名
            // 戻り値：なし
            //=========================================================================================
            public SSHChangeUser(string directory, SSHChangeUserInfo info) : base(directory, null) {
                m_changeUserInfo = info;
            }

            //=========================================================================================
            // 列挙子：SSHユーザー変更の情報
            //=========================================================================================
            public SSHChangeUserInfo ChangeUserInfo {
                get {
                    return m_changeUserInfo;
                }
            }
        }
    }
}

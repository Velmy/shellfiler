using System;
using System.Collections.Generic;
using System.Drawing;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using ShellFiler.Api;
using ShellFiler.FileSystem;

namespace ShellFiler.UI.Log {

    //=========================================================================================
    // クラス：ログ出力する1行の内容
    //=========================================================================================
    public abstract class LogLine {
        // ログIDの振り出し用
        private static long s_nextLogId = 1;

        // このインスタンスのログID
        private long m_logId;

        //=========================================================================================
        // 機　能：コンストラクタ
        // 引　数：なし
        // 戻り値：なし
        //=========================================================================================
        public LogLine() {
            m_logId = Interlocked.Increment(ref s_nextLogId);
        }

        //=========================================================================================
        // 機　能：ログの行内容を描画する
        // 引　数：[in]g           描画に使用するグラフィックス
        // 　　　　[in]scrLine     画面上の描画行
        // 　　　　[in]logPanel    ログパネル
        // 　　　　[in]lineContext 各行を描画するときの情報
        // 戻り値：なし
        //=========================================================================================
        public abstract void DrawLogLine(LogGraphics g, int scrLine, ILogViewContainer logPanel, DrawingLogLineContext lineContext);

        //=========================================================================================
        // 機　能：クリック可能かどうかを調べる
        // 引　数：[in]cursorPos  マウスカーソルの座標
        // 戻り値：クリック可能なときtrue
        //=========================================================================================
        public virtual bool HitTest(Point cursorPos) {
            return false;
        }

        //=========================================================================================
        // 機　能：クリック位置の桁情報を返す
        // 引　数：[in]logPanel   ログパネル
        // 　　　　[in]g          桁位置計測用のグラフィックス
        // 　　　　[in]cursorPos  マウスカーソルの座標
        // 　　　　[out]column    カラム位置を返す変数
        // 　　　　[out]onChar    文字の上の位置にいるときtrueを返す変数
        // 戻り値：なし
        //=========================================================================================
        public abstract void GetMouseHitColumn(ILogViewContainer logPanel, LogGraphics g, Point cursorPos, out int column, out bool onChar);

        //=========================================================================================
        // 機　能：選択中の行の内容を文字列で返す
        // 引　数：[in]startColumn   選択開始カラム（全選択のとき0）
        // 　　　　[in]endColumn     選択終了カラム（全選択のときint.MaxValue）
        // 戻り値：選択されている文字列（削除済みの行のときnull）
        //=========================================================================================
        public abstract string GetSelectedLine(int startColumn, int endColumn);

        //=========================================================================================
        // 機　能：マウスがクリックされたときの処理を行う
        // 引　数：[in]cursorPos  マウスカーソルの座標
        // 戻り値：なし
        //=========================================================================================
        public virtual void OnClick(Point cursorPos) {
        }

        //=========================================================================================
        // プロパティ：ログID
        //=========================================================================================
        public long LogId {
            get {
                return m_logId;
            }
        }

        //=========================================================================================
        // プロパティ：全選択されたときの最大カラム位置
        //=========================================================================================
        public virtual int SelectAllMaxColumn {
            get {
                return 0;
            }
        }
    }
}
